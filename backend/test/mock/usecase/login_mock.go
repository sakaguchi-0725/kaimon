// Code generated by MockGen. DO NOT EDIT.
// Source: login.go
//
// Generated by this command:
//
//	mockgen -source=login.go -destination=../test/mock/usecase/login_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	usecase "backend/usecase"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogin is a mock of Login interface.
type MockLogin struct {
	ctrl     *gomock.Controller
	recorder *MockLoginMockRecorder
	isgomock struct{}
}

// MockLoginMockRecorder is the mock recorder for MockLogin.
type MockLoginMockRecorder struct {
	mock *MockLogin
}

// NewMockLogin creates a new mock instance.
func NewMockLogin(ctrl *gomock.Controller) *MockLogin {
	mock := &MockLogin{ctrl: ctrl}
	mock.recorder = &MockLoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogin) EXPECT() *MockLoginMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockLogin) Execute(ctx context.Context, in usecase.LoginInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockLoginMockRecorder) Execute(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockLogin)(nil).Execute), ctx, in)
}
