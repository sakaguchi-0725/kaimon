// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/get_group_members.go
//
// Generated by this command:
//
//	mockgen -source=usecase/get_group_members.go -destination=test/mock/usecase/get_group_members_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	usecase "backend/usecase"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetGroupMembers is a mock of GetGroupMembers interface.
type MockGetGroupMembers struct {
	ctrl     *gomock.Controller
	recorder *MockGetGroupMembersMockRecorder
	isgomock struct{}
}

// MockGetGroupMembersMockRecorder is the mock recorder for MockGetGroupMembers.
type MockGetGroupMembersMockRecorder struct {
	mock *MockGetGroupMembers
}

// NewMockGetGroupMembers creates a new mock instance.
func NewMockGetGroupMembers(ctrl *gomock.Controller) *MockGetGroupMembers {
	mock := &MockGetGroupMembers{ctrl: ctrl}
	mock.recorder = &MockGetGroupMembersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetGroupMembers) EXPECT() *MockGetGroupMembersMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetGroupMembers) Execute(ctx context.Context, in usecase.GetGroupMembersInput) (usecase.GetGroupMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, in)
	ret0, _ := ret[0].(usecase.GetGroupMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetGroupMembersMockRecorder) Execute(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetGroupMembers)(nil).Execute), ctx, in)
}
