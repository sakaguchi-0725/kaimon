/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/signup': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * ユーザー登録
     * @description 新規ユーザーを作成します
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['SignUpRequest']
        }
      }
      responses: {
        /** @description ユーザー登録成功 */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        400: components['responses']['BadRequest']
        500: components['responses']['InternalServerError']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/signup/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * ユーザー登録確認
     * @description 確認コードを使用してユーザー登録を完了します
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['SignUpConfirmRequest']
        }
      }
      responses: {
        /** @description ユーザー登録確認成功 */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        400: components['responses']['BadRequest']
        410: components['responses']['ExpiredCode']
        500: components['responses']['InternalServerError']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * ログイン
     * @description メールアドレスとパスワードでログインします
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['LoginRequest']
        }
      }
      responses: {
        /** @description ログイン成功 */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        400: components['responses']['BadRequest']
        401: components['responses']['Unauthorized']
        500: components['responses']['InternalServerError']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reset-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * パスワードリセット
     * @description パスワードリセット用のメールを送信します
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ResetPasswordRequest']
        }
      }
      responses: {
        /** @description パスワードリセットメール送信成功 */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        400: components['responses']['BadRequest']
        500: components['responses']['InternalServerError']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reset-password/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * パスワードリセット確認
     * @description 確認コードを使用してパスワードリセットを確認します
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ResetPasswordConfirmRequest']
        }
      }
      responses: {
        /** @description パスワードリセット確認成功 */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        400: components['responses']['BadRequest']
        410: components['responses']['ExpiredCode']
        500: components['responses']['InternalServerError']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/signup/resend-code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 確認コード再送信
     * @description 会員登録時に使用する確認コードを再送信します
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ResendConfirmationCodeRequest']
        }
      }
      responses: {
        /** @description 確認コード再送信成功 */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        400: components['responses']['BadRequest']
        500: components['responses']['InternalServerError']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 参加しているグループ一覧取得
     * @description ユーザーが参加しているグループの一覧を取得します
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description グループ一覧取得成功 */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetJoinedGroupsResponse']
          }
        }
        401: components['responses']['Unauthorized']
        500: components['responses']['InternalServerError']
      }
    }
    put?: never
    /**
     * グループ作成
     * @description 新しいグループを作成します
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateGroupRequest']
        }
      }
      responses: {
        /** @description グループ作成成功 */
        201: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        400: components['responses']['BadRequest']
        401: components['responses']['Unauthorized']
        422: components['responses']['GroupLimitExceeded']
        500: components['responses']['InternalServerError']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/groups/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * グループ詳細取得
     * @description 指定されたグループの詳細情報を取得します
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description グループID */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description グループ詳細取得成功 */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetGroupResponse']
          }
        }
        401: components['responses']['Unauthorized']
        403: components['responses']['Forbidden']
        404: components['responses']['NotFound']
        500: components['responses']['InternalServerError']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/groups/{id}/members': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * グループメンバー一覧取得
     * @description 指定されたグループのメンバー一覧を取得します
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description グループID */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description グループメンバー一覧取得成功 */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetGroupMembersResponse']
          }
        }
        401: components['responses']['Unauthorized']
        403: components['responses']['Forbidden']
        404: components['responses']['NotFound']
        500: components['responses']['InternalServerError']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/groups/{id}/items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * ショッピングアイテム一覧取得
     * @description 指定されたグループのショッピングアイテム一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description カテゴリーID */
          categoryId?: number
          /** @description ステータス */
          status?: components['schemas']['ShoppingItemStatus']
          /** @description 取得件数（デフォルト：20） */
          limit?: number
          /** @description 取得開始位置（デフォルト：0） */
          offset?: number
        }
        header?: never
        path: {
          /** @description グループID */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description ショッピングアイテム一覧取得成功 */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetShoppingItemsResponse']
          }
        }
        401: components['responses']['Unauthorized']
        403: components['responses']['Forbidden']
        404: components['responses']['NotFound']
        500: components['responses']['InternalServerError']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    SignUpRequest: {
      /** @description ユーザー名 */
      name: string
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string
      /**
       * Format: password
       * @description パスワード
       */
      password: string
    }
    SignUpConfirmRequest: {
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string
      /** @description 確認コード */
      confirmationCode: string
    }
    LoginRequest: {
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string
      /**
       * Format: password
       * @description パスワード
       */
      password: string
    }
    ResetPasswordRequest: {
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string
    }
    ResetPasswordConfirmRequest: {
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string
      /** @description 確認コード */
      confirmationCode: string
    }
    ResendConfirmationCodeRequest: {
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string
    }
    GetJoinedGroupsResponse: {
      groups?: components['schemas']['JoinedGroup'][]
    }
    JoinedGroup: {
      /** @description グループID */
      id?: string
      /** @description グループ名 */
      name?: string
      /** @description グループ説明 */
      description?: string
    }
    CreateGroupRequest: {
      /** @description グループ名 */
      name: string
      /** @description グループ説明 */
      description?: string
    }
    Error: {
      /** @description エラーコード */
      code?: string
      /** @description エラーメッセージ */
      message?: string
    }
    GetGroupResponse: {
      /** @description グループID */
      id?: string
      /** @description グループ名 */
      name?: string
      /** @description グループ説明 */
      description?: string
      /**
       * Format: date-time
       * @description グループ作成日時
       */
      createdAt?: string
    }
    GetGroupMembersResponse: {
      members?: components['schemas']['Member'][]
    }
    Member: {
      /** @description メンバーID */
      id?: string
      /** @description メンバー名 */
      name?: string
      /** @description メンバーの役割 */
      role?: string
      /** @description メンバーのステータス */
      status?: string
      /**
       * Format: date-time
       * @description メンバー参加日時
       */
      joinedAt?: string
    }
    GetShoppingItemsResponse: {
      items?: components['schemas']['ShoppingItem'][]
      /**
       * Format: int64
       * @description 全アイテム数
       */
      totalCount?: number
      /** @description 次のページがあるかどうか */
      hasNext?: boolean
    }
    ShoppingItem: {
      /**
       * Format: int64
       * @description アイテムID
       */
      id?: number
      /** @description アイテム名 */
      name?: string
      /** @description 登録者ID */
      memberId?: string
      status?: components['schemas']['ShoppingItemStatus']
    }
    /**
     * @description 買い物メモのステータス
     * @enum {string}
     */
    ShoppingItemStatus: 'UNPURCHASED' | 'PURCHASED' | 'IN_CART'
  }
  responses: {
    /** @description リクエスト不正 */
    BadRequest: {
      headers: {
        [name: string]: unknown
      }
      content: {
        /** @example {
         *       "code": "BAD_REQUEST",
         *       "message": "リクエストが不正です"
         *     } */
        'application/json': components['schemas']['Error']
      }
    }
    /** @description 確認コードの有効期限切れ */
    ExpiredCode: {
      headers: {
        [name: string]: unknown
      }
      content: {
        /** @example {
         *       "code": "EXPIRED_CODE",
         *       "message": "確認コードの有効期限が切れています"
         *     } */
        'application/json': components['schemas']['Error']
      }
    }
    /** @description 認証エラー */
    Unauthorized: {
      headers: {
        [name: string]: unknown
      }
      content: {
        /** @example {
         *       "code": "UNAUTHORIZED",
         *       "message": "メールアドレスまたはパスワードが正しくありません"
         *     } */
        'application/json': components['schemas']['Error']
      }
    }
    /** @description アクセス権限がありません */
    Forbidden: {
      headers: {
        [name: string]: unknown
      }
      content: {
        /** @example {
         *       "code": "FORBIDDEN",
         *       "message": "リソースへのアクセス権限がありません"
         *     } */
        'application/json': components['schemas']['Error']
      }
    }
    /** @description リソースが見つかりません */
    NotFound: {
      headers: {
        [name: string]: unknown
      }
      content: {
        /** @example {
         *       "code": "NOT_FOUND",
         *       "message": "グループが見つかりません"
         *     } */
        'application/json': components['schemas']['Error']
      }
    }
    /** @description グループ数制限超過 */
    GroupLimitExceeded: {
      headers: {
        [name: string]: unknown
      }
      content: {
        /** @example {
         *       "code": "GROUP_LIMIT_EXCEEDED",
         *       "message": "グループ数の上限に達しています。プランをアップグレードすると、より多くのグループを作成できます。"
         *     } */
        'application/json': components['schemas']['Error']
      }
    }
    /** @description サーバーエラー */
    InternalServerError: {
      headers: {
        [name: string]: unknown
      }
      content: {
        /** @example {
         *       "code": "INTERNAL_SERVER_ERROR",
         *       "message": "サーバーエラーが発生しました"
         *     } */
        'application/json': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
